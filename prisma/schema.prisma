// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id                String        @id @default(uuid())
  title             String        @unique @db.VarChar(255)
  lat               Float
  lng               Float
  cityName          String        @default("")
  description       Json          @default("[]")
  published         Boolean       @default(false)
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  pictures          Picture[]
  maxAdultsForNight Int           @default(0)
  priceForNight     Float         @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  reservations      Reservation[]
  tags              Tag[]
}

model Reservation {
  id             String   @id @default(uuid())
  locationId     String
  location       Location @relation(fields: [locationId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  adultsForNight Int
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  confirmed      Boolean  @default(false)
}

model Picture {
  id         String   @id @default(uuid())
  width      Int
  height     Int
  src        String
  alt        String?
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  password    String
  name        String
  surname     String
  profile     String        @unique
  locations   Location[]
  reservation Reservation[]
}

model Tag {
  id        String     @id @default(uuid())
  value     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  color     String     @default("efb61f")
  locations Location[]
}
